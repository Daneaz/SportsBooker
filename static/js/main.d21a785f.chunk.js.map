{"version":3,"sources":["utility.js","App.js","serviceWorker.js","index.js"],"names":["getApiConf","method","jsonObj","token","conf","headers","timeout","Authorization","body","JSON","stringify","fetchAPI","url","a","Promise","resolve","reject","fetch","path","process","startsWith","resp","json","respJson","status","message","toString","timeSlot","durationSlot","typeList","text","value","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","itemMargin","form","width","submit","multiSelect","SportsBooker","classes","React","useState","moment","add","selectedDate","setSelectedDate","time","setTime","duration","setDuration","type","setType","email","setEmail","password","setPassword","isSubmit","setIsSubmit","submitForm","event","preventDefault","date","response","Swal","fire","icon","title","showConfirmButton","html","Container","component","maxWidth","CssBaseline","className","onSubmit","TextField","required","fullWidth","label","onChange","target","utils","DateFnsUtils","disableToolbar","format","margin","minDate","id","autoOk","KeyboardButtonProps","FormControl","InputLabel","Select","map","cc","i","MenuItem","key","CircularProgress","Button","Box","mt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d21a785f.chunk.js","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\n//RESTful API fetch\nconst getApiUrl = (path) => {\n    return `${API_URL}${path.startsWith('/') ? '' : '/'}${path}`\n};\n\nconst getApiConf = (method, jsonObj, token) => {\n    let conf = {\n        method: method,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        timeout: 30000\n    }\n    if (token) {\n        conf.headers.Authorization = `Bearer ${token}`;\n    }\n\n    if (jsonObj) {\n        conf.body = JSON.stringify(jsonObj)\n    }\n\n    return conf;\n};\n\nexport const fetchAPI = async (method, url, jsonObj) => {\n    return new Promise(async function (resolve, reject) {\n        try {\n            //send request\n            const resp = await fetch(getApiUrl(url), getApiConf(method, jsonObj));\n\n            let respJson;\n            try {\n                respJson = await resp.json();\n            } catch (error) {\n                respJson = resp;\n            }\n\n            switch (resp.status) {\n                case 200:\n                case 201:\n                case 202:\n                case 204:\n                    resolve(respJson);\n                    break;\n                case 400:\n                    reject(respJson);\n                    break;\n                case 401:\n                    reject(respJson);\n                    break;\n                case 403:\n                    reject(`Permission denied. ${respJson}`);\n                    break;\n                case 404:\n                    reject(`Error 404. ${respJson.message}, url: ${respJson.url}`);\n                    break;\n                case 406:\n                    reject(`Request content error. ${respJson}`);\n                    break;\n                case 409:\n                    reject(`Conflict... ${respJson}`);\n                    break;\n                case 500:\n                    reject(`Internal server error, ${respJson}`);\n                    break;\n                default:\n                    reject(`Unknown status: ${resp.status}, Error: ${JSON.stringify(respJson)}}`);\n                    break;\n            }\n        } catch (error) {\n            if (error.toString() === \"TypeError: Network request failed\")\n                reject(\"Network error, please check your network connection and retry. If error still exist, please contact administrator for help\")\n            else\n                reject(`Unknown Response ${error}`)\n        }\n    });\n};\n","import React from 'react';\nimport 'date-fns';\nimport {makeStyles} from '@material-ui/core/styles';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport {\n    Box,\n    Button,\n    CircularProgress,\n    Container,\n    CssBaseline,\n    FormControl,\n    InputLabel,\n    Link,\n    MenuItem,\n    Select,\n    TextField,\n    Typography\n} from '@material-ui/core';\nimport moment from \"moment\";\nimport {fetchAPI} from \"./utility\";\nimport Swal from 'sweetalert2'\n\nlet timeSlot = [\n    \"07:00 AM\",\n    \"08:00 AM\",\n    \"09:00 AM\",\n    \"10:00 AM\",\n    \"11:00 AM\",\n    \"12:00 PM\",\n    \"01:00 PM\",\n    \"02:00 PM\",\n    \"03:00 PM\",\n    \"04:00 PM\",\n    \"05:00 PM\",\n    \"06:00 PM\",\n    \"07:00 PM\",\n    \"08:00 PM\",\n    \"09:00 PM\"\n]\n\nlet durationSlot = [\n    \"60\",\n    \"120\"\n]\n\nlet typeList = [\n    {text: \"Badminton Courts\", value: 31},\n    {text: \"Basketball Courts (OCBC Arena)\", value: 32},\n    {text: \"Table Tennis Tables\", value: 33},\n    {text: \"Netball Courts\", value: 34},\n    {text: \"Volleyball Courts\", value: 35},\n    {text: \"Basketball Courts (Sports Hub Hard Courts)\", value: 42},\n    {text: \"Tennis Indoor Courts\", value: 85},\n]\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://github.com/Daneaz/sports_booker\">\n                Eugene Wu\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    itemMargin: {\n        marginTop: theme.spacing(1),\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    submit: {\n        marginTop: theme.spacing(5),\n    },\n    multiSelect: {\n        marginTop: theme.spacing(3),\n    }\n}));\n\nexport default function SportsBooker() {\n    const classes = useStyles();\n    const [selectedDate, setSelectedDate] = React.useState(moment(new Date()).add(7, \"days\"));\n    const [time, setTime] = React.useState('02:00 PM');\n    const [duration, setDuration] = React.useState(120);\n    const [type, setType] = React.useState(typeList[0]);\n    const [email, setEmail] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const [isSubmit, setIsSubmit] = React.useState(false);\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n    };\n\n    const handleTimeChange = (event) => {\n        setTime(event.target.value);\n    };\n\n    const handlerDurationChange = (event) => {\n        setDuration(event.target.value);\n    };\n\n\n    const handlerTypeChange = (event) => {\n        setType(event.target.value);\n    };\n\n    const handlePasswordChange = (event) => {\n        setPassword(event.target.value);\n    };\n\n    const handleEmailChange = (event) => {\n        setEmail(event.target.value);\n    }\n\n    const submitForm = async (event) => {\n        setIsSubmit(true);\n        event.preventDefault();\n        try {\n            let response = await fetchAPI('POST', 'book', {\n                email: email,\n                password: password,\n                date: selectedDate,\n                time: time,\n                duration: duration,\n                type: type\n            });\n\n            await Swal.fire({\n                icon: 'success',\n                title: 'Success',\n                text: response,\n                showConfirmButton: true\n            })\n\n            setIsSubmit(false);\n        } catch (err) {\n            await Swal.fire({\n                icon: 'error',\n                title: 'Error',\n                html: err +\n                    ', Please visit ' +\n                    '<a href=\"https://sportshub.perfectgym.com/clientportal2/#/FacilityBooking?clubId=1\">OCBC SportsHub</a> ' +\n                    'for more detail',\n                showConfirmButton: true\n            })\n            setIsSubmit(false);\n        }\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    National Stadium Booker\n                </Typography>\n                <form className={classes.form} onSubmit={submitForm}>\n                    <TextField required className={classes.itemMargin} fullWidth label=\"Email:\"\n                               onChange={handleEmailChange}/>\n                    <TextField required type=\"password\" className={classes.itemMargin} fullWidth label=\"Password:\"\n                               onChange={handlePasswordChange}/>\n                    <MuiPickersUtilsProvider className={classes.itemMargin} utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            margin=\"normal\"\n                            minDate={moment(new Date()).add(1, \"days\")}\n                            id=\"date-picker-inline\"\n                            label=\"Date:\"\n                            value={selectedDate}\n                            autoOk\n                            fullWidth\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                    <FormControl className={classes.itemMargin} fullWidth>\n                        <InputLabel>Time:</InputLabel>\n                        <Select\n                            value={time}\n                            onChange={handleTimeChange}\n                        >\n                            {\n                                timeSlot.map((cc, i) => {\n                                    return <MenuItem key={i} value={cc}>{cc}</MenuItem>\n                                })\n                            }\n                        </Select>\n                    </FormControl>\n\n                    <FormControl className={classes.itemMargin} fullWidth>\n                        <InputLabel>Duration:</InputLabel>\n                        <Select\n                            value={duration}\n                            onChange={handlerDurationChange}\n                        >\n                            {\n                                durationSlot.map((cc, i) => {\n                                    return <MenuItem key={i} value={cc}>{cc} mins</MenuItem>\n                                })\n                            }\n                        </Select>\n                    </FormControl>\n\n                    <FormControl className={classes.itemMargin} fullWidth>\n                        <InputLabel>Facility Type:</InputLabel>\n                        <Select\n                            value={type}\n                            onChange={handlerTypeChange}\n                        >\n                            {\n                                typeList.map((cc, i) => {\n                                    return <MenuItem key={i} value={cc}>{cc.text}</MenuItem>\n                                })\n                            }\n                        </Select>\n                    </FormControl>\n                    {isSubmit ?\n                        <CircularProgress className={classes.submit}/>\n                        :\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Book\n                        </Button>\n                    }\n\n                </form>\n            </div>\n\n            <Box mt={8}>\n                <Copyright/>\n            </Box>\n        </Container>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}