{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","default","defaults","baseURL","process","headers","post","timeSlot","durationSlot","typeList","text","value","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","itemMargin","form","width","submit","multiSelect","SportsBooker","classes","React","useState","moment","add","selectedDate","setSelectedDate","time","setTime","duration","setDuration","type","setType","email","setEmail","password","setPassword","Container","component","maxWidth","CssBaseline","className","onSubmit","evt","preventDefault","date","then","response","alert","data","catch","error","TextField","required","fullWidth","label","onChange","event","target","utils","DateFnsUtils","disableToolbar","format","margin","minDate","id","autoOk","KeyboardButtonProps","FormControl","InputLabel","Select","map","cc","i","MenuItem","key","Button","Box","mt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.46311ff4.chunk.js","sourcesContent":["import React from 'react';\nimport 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport { Container, CssBaseline, Link, Box, Typography, MenuItem, InputLabel, Button, Select, FormControl, TextField } from '@material-ui/core';\nimport moment from \"moment\";\n\nconst axios = require('axios').default;\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\nlet timeSlot = [\n  \"07:00 AM\",\n  \"08:00 AM\",\n  \"09:00 AM\",\n  \"10:00 AM\",\n  \"11:00 AM\",\n  \"12:00 PM\",\n  \"01:00 PM\",\n  \"02:00 PM\",\n  \"03:00 PM\",\n  \"04:00 PM\",\n  \"05:00 PM\",\n  \"06:00 PM\",\n  \"07:00 PM\",\n  \"08:00 PM\",\n  \"09:00 PM\"\n]\n\nlet durationSlot = [\n  \"60\",\n  \"120\"\n]\n\nlet typeList = [\n  {text: \"Badminton Courts\", value: 31},\n  {text: \"Basketball Courts (OCBC Arena)\", value: 32},\n  {text: \"Table Tennis Tables\", value: 33},\n  {text: \"Netball Courts\", value: 34},\n  {text: \"Volleyball Courts\", value: 35},\n  {text: \"Basketball Courts (Sports Hub Hard Courts)\", value: 42},\n]\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://github.com/Daneaz/BadmintonBooker\">\n        Eugene Wu\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(20),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  itemMargin: {\n    marginTop: theme.spacing(1),\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    marginTop: theme.spacing(5),\n  },\n  multiSelect: {\n    marginTop: theme.spacing(3),\n  }\n}));\n\nexport default function SportsBooker() {\n  const classes = useStyles();\n  const [selectedDate, setSelectedDate] = React.useState(moment(new Date()).add(7, \"days\"));\n  const [time, setTime] = React.useState('02:00 PM');\n  const [duration, setDuration] = React.useState(120);\n  const [type, setType] = React.useState(typeList[0]);\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  const handleTimeChange = (event) => {\n    setTime(event.target.value);\n  };\n\n  const handlerDurationChange = (event) => {\n    setDuration(event.target.value);\n  };\n\n\n  const handlerTypeChange = (event) => {\n    setType(event.target.value);\n  };\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  }\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    axios.post('/book', {\n      email: email,\n      password: password,\n      date: selectedDate,\n      time: time,\n      duration: duration,\n      type: type\n    }).then((response) => {\n      alert(response.data);\n    }).catch((error) => {\n      alert(error);\n    });\n  }\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          National Stadium Booker\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <TextField required className={classes.itemMargin} fullWidth label=\"Email:\" onChange={handleEmailChange} />\n          <TextField required type=\"password\" className={classes.itemMargin} fullWidth label=\"Password:\" onChange={handlePasswordChange} />\n          <MuiPickersUtilsProvider className={classes.itemMargin} utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"yyyy-MM-dd\"\n              margin=\"normal\"\n              minDate={moment(new Date()).add(7, \"days\")}\n              id=\"date-picker-inline\"\n              label=\"Date:\"\n              value={selectedDate}\n              autoOk\n              fullWidth\n              onChange={handleDateChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </MuiPickersUtilsProvider>\n          <FormControl className={classes.itemMargin} fullWidth>\n            <InputLabel>Time:</InputLabel>\n            <Select\n              value={time}\n              onChange={handleTimeChange}\n            >\n              {\n                timeSlot.map((cc, i) => {\n                  return <MenuItem key={i} value={cc}>{cc}</MenuItem>\n                })\n              }\n            </Select>\n          </FormControl>\n\n          <FormControl className={classes.itemMargin} fullWidth>\n            <InputLabel>Duration:</InputLabel>\n            <Select\n                value={duration}\n                onChange={handlerDurationChange}\n            >\n              {\n                durationSlot.map((cc, i) => {\n                  return <MenuItem key={i} value={cc}>{cc} mins</MenuItem>\n                })\n              }\n            </Select>\n          </FormControl>\n\n          <FormControl className={classes.itemMargin} fullWidth>\n            <InputLabel>Facility Type:</InputLabel>\n            <Select\n                value={type}\n                onChange={handlerTypeChange}\n            >\n              {\n                typeList.map((cc, i) => {\n                  return <MenuItem key={i} value={cc}>{cc.text}</MenuItem>\n                })\n              }\n            </Select>\n          </FormControl>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Book\n          </Button>\n        </form>\n      </div>\n\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container >\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}